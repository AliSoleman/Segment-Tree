#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define fi first
#define se second
const int NN = 2e6+7;
const int MAX = 5e4+7;
const int MOD = 1e9+7;
const ll INF = 1e18;
const int S = 1 << 18;
const int rootN = 555;
using namespace std;
ll Gcd(ll a, ll b)
{
    if(b > a) swap(a,b);
    if(b == 0)
        return a;
    return Gcd(b, a%b) ;
}
ll poww(ll x, ll n, ll mod)
{
    if(x == 0) return 0 ;
    if(x == 1) return 1;
    if(n == 0) return 1 ;
    if(n == 1) return x%mod ;
    ll Ans = poww(x, n/2, mod)%mod ;
    Ans = (Ans * Ans)%mod;
    if(n%2) return (Ans *x) %mod ;
    return Ans ;
}
ll inv(ll x,ll mod)
{
    return poww(x, mod-2, mod)%mod ;
}
bool prime[NN];
void seive()
{
    for(ll i=2; i<=NN; i++)
    {
        prime[i]=0;
    }
    for(ll i=2; i<=NN; i++)
    {
        if(prime[i]==0)
        {
            for(ll j=i*i; j<=NN; j+=i)
            {
                prime[j]=1;
            }
        }
    }
}
int ar[NN], b[NN], freq[NN], distinct ;
struct query
{
    int L;
    int R;
    int q_no;
    int block_no;
    bool operator < (query& q2)
    {
        if(block_no < q2.block_no)
            return 1;
        else if(block_no > q2.block_no)
            return 0;
        else return R < q2.R;
    }
};
void Add(int& elem)
{
    if(!freq[elem])distinct++;
    freq[elem]++;
}
void Remove(int& elem)
{
    freq[elem]--;
    if(!freq[elem])
        distinct--;
}
 
void adjust(int& curr_l, int& curr_r, query& q)
{
    while(curr_l > q.L)
    {
        curr_l--;
        Add(ar[curr_l]);
    }
    while(curr_r < q.R)
    {
        curr_r++;
        Add(ar[curr_r]);
    }
	while(curr_l < q.L)
    {
        Remove(ar[curr_l]);
        curr_l++;
    }
    while(curr_r > q.R)
    {
        Remove(ar[curr_r]);
        curr_r--;
    }
 
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int test = 1;
    //cin >> test;
Start:
    while( test --> 0 )
    {
        int q, n;
        cin >> n >> q;
        int m = 0;
        map<int,int>comp;
        for(int i = 1 ; i <= n ; i ++ )
        {
            cin >> ar[i];
            if(comp.find(ar[i]) == comp.end())
            {
                comp[ar[i]] = ++m;
            }
            ar[i] = comp[ar[i]];
        }
        vector<query> queries(q);
        for(int i = 0; i < q; i++)
        {
            int u,v;
            cin >> u >>v;
            queries[i].L = u;
            queries[i].R = v;
            queries[i].q_no = i;
            queries[i].block_no = u/rootN;
        }
        vector<int>answer(queries.size());
        distinct = 1;
        sort(queries.begin(), queries.end());
        int curr_l = queries[0].L;
        int curr_r = queries[0].L;
        freq[ar[curr_l]]++;
        for(query& qr : queries)
        {
            adjust(curr_l, curr_r, qr);
            answer[qr.q_no] = distinct;
        }
        for(int x : answer)
            cout<<x<<'\n';
    }
    return 0;
}
